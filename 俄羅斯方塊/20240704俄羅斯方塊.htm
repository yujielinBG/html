<html lang="en">
	<head>
	    <title>俄羅斯方塊</title>
		<meta charset="UTF-8">
		<style>
			canvas { border: 1px solid #000; }
		</style>
	</head>
	<body>
		<canvas id="_Canvas" width="250" height="500"></canvas>
<!--		
		<img id="w0625" src="./0625.png" alt="Source Image" style="display:none;" >
		
		<img id="select" src="./select.png" alt="Source Image" style="display:none;" >
		
		<img id="left" src="./left.png" alt="Source Image" style="display:none;" >
		
		<img id="right" src="./right.png" alt="Source Image" style="display:none;" >
-->		
	</body>
</html>


<!--
=======================================================
   Script
=======================================================
-->
<script>

let cellWidth = 25;
let width = 10;
let height = 20;

let matrix = [];
let shape = [];

const canvas = document.getElementById('_Canvas');
const ctx = canvas.getContext('2d');	

function clean(){
    ctx.fillStyle = 'white';
    ctx.fillRect( 0 , 0 , width*cellWidth , height*cellWidth );
}

function drawBackground(){

    ctx.beginPath();
    ctx.strokeStyle = 'gray'; 
    ctx.lineWidth = 1 ; 

    for( let i= 0 ;i <= width ;i++ ){
        ctx.moveTo(i*cellWidth, 0);  
        ctx.lineTo(i*cellWidth, height*cellWidth); 
    }
    for( let j= 0 ;j <= height ;j++ ){
        ctx.moveTo(0, j*cellWidth);  
        ctx.lineTo(width*cellWidth, j*cellWidth); 
    }

    for (let row = 0; row < matrix.length; row++) {
		for (let col = 0; col < matrix[row].length; col++) {
            //console.log("for");
            if( matrix[row][col] ==1 ){
                //console.log("if");
                ctx.fillRect(col*cellWidth, row*cellWidth, cellWidth, cellWidth)
            }
            
			
		}
	}

    ctx.stroke();

}

class Shape {
    name = "" ; //I, L
    pictures = [] ;  
    row = 0;
    col = 0;
    index = 0;

    constructor( name ) {
        this.name = name ;
    }
    
    moveRight(){
        if (this.check( this.row, this.col+1, this.index)){
            this.col++;
        }
    }
    moveLeft(){
        if (this.check( this.row, this.col-1, this.index)){
            this.col--;
        }
    }
    moveDown(){
        if (this.check( this.row+1, this.col, this.index)){
            this.row++;
        }else {
            this.save();
        }
    }
    rotation(){
        let oldIndex = this.index ;
        if ( ++this.index >= this.pictures.length ) {
            this.index = 0 ;
        }
        if (!this.check( this.row, this.col, this.index)){
            this.index = oldIndex ;
        }
    }
    draw(){
        ctx.fillStyle = 'black';
        for( let i=0; i<this.pictures[this.index].length; i++ ) {
            let newCol = this.col+this.pictures[this.index][i].col ;
            let newRow = this.row+this.pictures[this.index][i].row ;
            ctx.fillRect(newCol*cellWidth, newRow*cellWidth, cellWidth, cellWidth)
        }
    }
    save() {
        let points = this.pictures[this.index] ;
        for( let i=0; i<points.length; i++){
            let point = points[i] ;
            let pRow = this.row + point.row ;
            let pCol = this.col + point.col ;
            matrix[pRow][pCol]=1;
        }        
        this.row = 0 ;
        this.col = 0 ;

        let whatShape =Math.floor(Math.random()*shape.length);
        nowShape = shape[whatShape] ;

        let k = [] ;
        for(let i=0;i<matrix.length;i++){
            let l = 0 ;
            for(let j=0;j<matrix[i].length;j++){
                if(matrix[i][j]==1){
                    l++ ;
                }
            }    
            if(l==matrix[i].length){
                k[i]=1;
            }else if(l!=matrix[i].length){
                k[i]=0;
            }
            console.log(k);
            console.log(l);
        }
        for(let i=0;i<matrix.length;i++){
            if(k[i]==1){
                for(let m=0;m<matrix[i].length;m++){
                    for(let n=i;n>0;n--){
                        matrix[n][m]=matrix[n-1][m];
                    }
                    //matrix[i][m]=matrix[i-1][m];
                }
            }
        }
    }
    check( nextRow , nextCol , nextIndex ){
        let points = this.pictures[nextIndex] ;
        for( let i=0; i<points.length; i++){
            let point = points[i] ;
            let pRow = nextRow + point.row ;
            let pCol = nextCol + point.col ;
            if ( pRow >= height  ) {
                return false ;
            }
            if ( pCol < 0 || pCol >= width ) {
                return false ;
            }
            //console.log(matrix);
            //console.log(pRow);
            //console.log(pCol);
            if ( matrix[pRow][pCol] != 0 ) {
                return false ;
            } 
        }
        return true ;
    }

}

class Point {
    row = 0;
    col = 0;
    constructor( row, col ) {
        this.row = row ;
        this.col = col ;
    }
}

let shapeI = new Shape("I") ;
let ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 2, 4 ) ;
ary[ary.length] = new Point( 3, 4 ) ;
shapeI.pictures[0] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 3 ) ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 0, 6 ) ;
shapeI.pictures[1] = ary  ;

//console.log(shapeI);


let shapeJ = new Shape("J") ;
ary = [] ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 2, 5 ) ;
ary[ary.length] = new Point( 2, 4 ) ;
shapeJ.pictures[0] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 1, 6 ) ;
shapeJ.pictures[1] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 6 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 2, 5 ) ;
shapeJ.pictures[2] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 1, 6 ) ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 0, 6 ) ;
shapeJ.pictures[3] = ary  ;

//console.log(shapeJ);\

let shapeL = new Shape("L") ;
ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 2, 4 ) ;
ary[ary.length] = new Point( 2, 5 ) ;
shapeL.pictures[0] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 1, 6 ) ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 0, 6 ) ;
shapeL.pictures[1] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 2, 5 ) ;
shapeL.pictures[2] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 6 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 1, 6 ) ;
shapeL.pictures[3] = ary  ;

let shapeO = new Shape("O") ;
ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
shapeO.pictures[0] = ary  ;

let shapeS = new Shape("S") ;
ary = [] ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 0, 6 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
shapeS.pictures[0] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 2, 5 ) ;
shapeS.pictures[1] = ary  ;

let shapeT = new Shape("T") ;
ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 0, 6 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
shapeT.pictures[0] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 2, 5 ) ;
shapeT.pictures[1] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 1, 6 ) ;
shapeT.pictures[2] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 2, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
shapeT.pictures[3] = ary  ;

let shapeZ = new Shape("Z") ;
ary = [] ;
ary[ary.length] = new Point( 0, 4 ) ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 1, 6 ) ;
shapeZ.pictures[0] = ary  ;

ary = [] ;
ary[ary.length] = new Point( 0, 5 ) ;
ary[ary.length] = new Point( 1, 4 ) ;
ary[ary.length] = new Point( 1, 5 ) ;
ary[ary.length] = new Point( 2, 4 ) ;
shapeZ.pictures[1] = ary  ;


shape[0] = shapeI ;
shape[1] = shapeJ ;
shape[2] = shapeL ;
shape[3] = shapeO ;
shape[4] = shapeS ;
shape[5] = shapeT ;
shape[6] = shapeZ ;


console.log(shape);

let whatShape =Math.floor(Math.random()*shape.length);

//陣列(初始化)
for (let row = 0; row < 20; row++) {
    matrix[row] = [];

    for (let col = 0; col < 10; col++) {
        matrix[row][col] = 0; 
    }
}


let nowShape = shape[whatShape] ;
nowShape.draw();

console.log(whatShape);

console.log(matrix);

drawBackground();

function autoDown() {
    nowShape.moveDown() ;
    clean();
    nowShape.draw();
    drawBackground();
    console.log(matrix);
    setTimeout( autoDown, 500) ;
}

setTimeout( autoDown, 1000) ;

document.addEventListener('keydown', 
	function(event) {
		switch(event.code) {
				  
			case 'ArrowDown':
				  //console.log('Down arrow key pressed.');
                  nowShape.moveDown();
				  break;
				  
			case 'ArrowLeft':
				  //console.log('Left arrow key pressed.');
				  nowShape.moveLeft();
				  break;
				  
			case 'ArrowRight':
				  //console.log('Right arrow key pressed.');
				  nowShape.moveRight();
				  break;

            case 'Space':
				  //console.log('Space key pressed.');
				  nowShape.rotation();
				  break;

        }
        
        clean();
        nowShape.draw();
        drawBackground();
        console.log(matrix);
    }
);

</script> 