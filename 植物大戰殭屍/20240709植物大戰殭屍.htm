<html lang="en">
    <head>
        <title>植物大戰殭屍</title>
        <meta charset="UTF-8">
        <style>
            canvas {border: 1px solid #000; }
        </style>
    </head>
    <body>
        <div>
            <canvas id="_Canvas" width="1000" height="700"></canvas>
        </div>
        <img id="sunflower_P" src="./flower.png" alt="Source Image" style="display:none;" >
        <img id="plant_P" src="./plant.png" alt="Source Image" style="display:none;" >
        <img id="bullet_P" src="./leaf.png" alt="Source Image" style="display:none;" >
        <img id="sun_P" src="./sun.png" alt="Source Image" style="display:none;" >
        <img id="slowZombie_1_P" src="./halloween.png" alt="Source Image" style="display:none;" >
        <img id="angryZombie_1_P" src="./running.png" alt="Source Image" style="display:none;" >
        <img id="slowZombie_2_P" src="./halloween - 複製.png" alt="Source Image" style="display:none;" >
        <img id="angryZombie_2_P" src="./running - 複製.png" alt="Source Image" style="display:none;" >
        <img id="rock_P" src="./rocks.png" alt="Source Image" style="display:none;" >
        <img id="cart_P" src="./shopping-cart.png" alt="Source Image" style="display:none;" >
        <img id="pause" src="./pause.png" alt="Source Image" style="display:none;" >
        <img id="restart" src="./restart.png" alt="Source Image" style="display:none;" >

        開始:a
        暫停:s
        繼續:d
        結束:f 
    </body>
</html>

<!--
=======================================================
   Script
=======================================================
-->
<script>

const CELLWIDTH = 100 ;

const STATE_STOP = 0;
const STATE_RUN = 1;
const STATE_SUSPEND = 2;

const canvas = document.getElementById('_Canvas');
const ctx = canvas.getContext('2d');


class Game{
    state = STATE_STOP ;
    constructor() {
        document.addEventListener('keydown', this.keyEvents.bind(this) ) ;
    }
    init(){
    }
    start(){
        this.init();
        if ( this.state != STATE_STOP ) {
            return ;
        }
        this.state = STATE_RUN ;
        time();
    }
    suspend(){
        if ( this.state != STATE_RUN ) {
            return ;
        }
        ctx.drawImage(pause,CELLWIDTH*4.5,CELLWIDTH*2,CELLWIDTH*1.5,CELLWIDTH*1.5);
        this.state = STATE_SUSPEND ;
        //console.log( this.state );
    }
    resume(){
        if ( this.state != STATE_SUSPEND ) {
            return ;
        }
        this.state = STATE_RUN ;
        time();
    }
    stop(){
        if ( this.state != STATE_RUN ) {
            return ;
        }
        ctx.drawImage(restart,CELLWIDTH*4.5,CELLWIDTH*2,CELLWIDTH*1.5,CELLWIDTH*1.5);
        this.state = STATE_STOP ;
    }
    keyEvents(event) {
		switch(event.code) {
            case 'KeyA':
				//console.log('S key pressed.');
				this.start();
				break;

            case 'KeyS':
				//console.log('Space key pressed.');
				this.suspend();
				break;

            case 'KeyD':
				//console.log('Space key pressed.');
				this.resume();
				break;

            case 'KeyF':
				//console.log('Space key pressed.');
				this.stop();
				break;
        }
    }
}
let game = new Game();

function drawBackground(){
    ctx.fillStyle = 'green';
    ctx.fillRect( 0 , 0 , CELLWIDTH*9+CELLWIDTH , CELLWIDTH*5 );
    ctx.beginPath();
    ctx.strokeStyle = 'gray';
    ctx.lineWidth = 1.5 ;
    for( let i = 0 ; i < 9+1 ; i++ ){
        ctx.moveTo( i*CELLWIDTH+CELLWIDTH , 0*CELLWIDTH );
        ctx.lineTo( i*CELLWIDTH+CELLWIDTH , 5*CELLWIDTH );
    }
    ctx.stroke();
    ctx.strokeStyle = 'black';
    for( let i = 0 ; i < 5+1+2 ; i++ ){
        if( i >= 6 ){
            ctx.lineWidth = 4 ;
        }else{
            ctx.lineWidth = 2 ;
        }
        ctx.beginPath();
        ctx.moveTo( 0*CELLWIDTH+CELLWIDTH , i*CELLWIDTH );
        ctx.lineTo( 9*CELLWIDTH+CELLWIDTH , i*CELLWIDTH );
        ctx.stroke();
    }
    ctx.beginPath();
    ctx.strokeStyle = 'black';
    ctx.lineWidth = 3 ;
    for( let i = 0 ; i < 9+1 ; i++ ){
        ctx.moveTo( i*CELLWIDTH+CELLWIDTH , 6*CELLWIDTH );
        ctx.lineTo( i*CELLWIDTH+CELLWIDTH , 7*CELLWIDTH );
    }
    ctx.stroke();

    // sunFlower.draw(6,0);
    // plant.draw(6,1);
    // rock.draw(6,2);
}


class Sunflower{
    isAlive = true ;
    row = 1 ;
    col = 0 ;
    time10 = 0 ;
    draw(){
        if( game.state == STATE_RUN ){
            ctx.drawImage(sunflower_P,this.col*CELLWIDTH+CELLWIDTH,this.row*CELLWIDTH,CELLWIDTH*9/7,CELLWIDTH*9/7)
        }
    }
    timeout(){
        this.draw(this.row,this.col);
        this.time10 += 1 ;
        if(this.time10 == 10000 ){
            new Sun(1,0);
            this.time10 = 0 ;
        }
    }
}
class Plant{
    isAlive = true ;
    time10 = 0 ;
    row = 0 ;
    col = 0 ;
    draw(){
        if( game.state == STATE_RUN ){
            ctx.drawImage(plant_P,this.col*CELLWIDTH+CELLWIDTH,this.row*CELLWIDTH,CELLWIDTH*6/7,CELLWIDTH*6/7);
        }
    }
    timeout(){
        this.time10 += 1 ;
        this.draw();
        if( this.time10 == 300 ){
            console.log("sun");
            new Bullet(this.row,this.col*CELLWIDTH+CELLWIDTH+CELLWIDTH/2);
            this.time10 = 0 ;
        }
    }
}
class Rock{
    isAlive = true ;
    row = 1 ;
    col = 3 ;
    draw(){
        if( game.state == STATE_RUN ){
            ctx.drawImage(rock_P,this.col*CELLWIDTH+CELLWIDTH,this.row*CELLWIDTH,CELLWIDTH*6/7,CELLWIDTH*6/7);
        }
    }
    timeout(){
        this.draw(this.row,this.col);
    }
}
class Bullet{
    move = 0 ;
    row = 0 ;
    x = 0 ;
    isAlive = true ;
    constructor( row, x ) {
        this.row = row ;
        this.x = x ;
        objectsP[objectsP.length] = this; 
    }
    draw(){
        //console.log(x);
        if( game.state == STATE_RUN ){
            ctx.drawImage(bullet_P,this.x+this.move,this.row*CELLWIDTH+CELLWIDTH*3/10,CELLWIDTH*2/7,CELLWIDTH*2/7);
        }
    }
    timeout(){
        this.move += 1 ;
        if ( this.x+this.move > CELLWIDTH+9*CELLWIDTH ) {
            this.isAlive = false ;
        } else {
            this.draw();
        }
    }
}
class Sun{
    isAlive = true ;
    draw(row,col){
        if( game.state == STATE_RUN ){
            ctx.drawImage(sun_P,col*CELLWIDTH+CELLWIDTH,row*CELLWIDTH,CELLWIDTH*4/7,CELLWIDTH*4/7);
        }
    }
    timeout(){
        this.draw(1,0);
    }
}
class SlowZombie{
    isAlive = true ;
    who = 0 ;
    move = 0 ;
    time10 = 0 ;
    draw(row,x){
        if( this.who%2 == 0 ){
            ctx.drawImage(slowZombie_1_P,x+CELLWIDTH,row*CELLWIDTH,CELLWIDTH,CELLWIDTH);
        }else{
            ctx.drawImage(slowZombie_2_P,x+CELLWIDTH,row*CELLWIDTH,CELLWIDTH,CELLWIDTH);
        }
    }
    timeout(){
        this.time10 += 1 ;
        if( this.time10 == 200 ){
            this.who += 1 ;
            this.move += 50 ;
            this.time10 = 0 ;
        }
        this.draw(0,CELLWIDTH*9-this.move);
    }
    init(){
        this.move = 0 ;
    }
}
class AngryZombie{
    isAlive = true ;
    who = 0 ;
    move =0 ;
    time10 = 0 ;
    draw(row,x){
        if( x < 0 ){
            //cart.use(row);
        }
        if( this.who%2 == 0 ){
            ctx.drawImage(angryZombie_1_P,x+CELLWIDTH,row*CELLWIDTH,CELLWIDTH*6/7,CELLWIDTH*6/7);
        }else{
            ctx.drawImage(angryZombie_2_P,x+CELLWIDTH,row*CELLWIDTH,CELLWIDTH*6/7,CELLWIDTH*6/7);
        }
    }
    timeout(){
        this.time10 += 1 ;
        if( this.time10 == 200 ){
            this.who += 1 ;
            this.move += 50 ;
            this.time10 = 0 ;
        }
        this.draw(1,CELLWIDTH*9-this.move);
        //console.log(this.time10);
    }
    init(){
        this.move = 0 ;
    }
}
class Cart{
    isAlive = true ;
    draw(row,x){
        ctx.drawImage(cart_P,0,row*CELLWIDTH,CELLWIDTH*5/7,CELLWIDTH*5/7);
    }
    timeout(){
        for( let i = 0 ; i < 5 ; i ++ ){
            this.draw(i,0);
        }
    }
    use(row){
        //console.log(row);
        for( let i = 0-CELLWIDTH ; i < CELLWIDTH*9+CELLWIDTH ; i++ ){
            this.draw(row,i);
            setTimeout( this.use.bind(this) , 100 );
            //console.log(i);
        }
    }
}

let objectsP = [] ;
objectsP[objectsP.length] = new Sunflower();
objectsP[objectsP.length] = new Plant();
//objectsP[objectsP.length] = new Sun();
objectsP[objectsP.length] = new Rock();
objectsP[objectsP.length] = new Cart();

let objectsZ = [] ;
objectsZ[objectsZ.length] = new SlowZombie();
objectsZ[objectsZ.length] = new AngryZombie();

let move = 0 ;
function time(){
    if( game.state == STATE_RUN){
        drawBackground();
        //檢查
        for( let i=0; i<objectsP.length; i++ ) {
            if ( !objectsP[i].isAlive ) {
                objectsP.splice(i,1) ;
                i--;
            }
        }
        for( let i=0; i<objectsZ.length; i++ ) {
            if ( !objectsZ[i].isAlive ) {
                objectsZ.splice(i,1) ;
                i--;
            }
        }
        // for( let i=0; i<objectsZ.length; i++ ) {
        //     if ( objectsZ[i] ==  ) {
                
        //     }
        // }

        //畫
        for( let i=0; i<objectsP.length; i++ ) {
            objectsP[i].timeout() ;
        }
        for( let i=0; i<objectsZ.length; i++ ) {
            objectsZ[i].timeout() ;
        }
        setTimeout( time , 1 ) ;
    }
}




</script>